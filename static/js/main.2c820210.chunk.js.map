{"version":3,"sources":["layout/Tictac.js","layout/Header.js","layout/Footer.js","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["connect","state","player1","player2","winClass","winCombinationClass","gameActive","field","turn","dispatch","clickX","i","type","payload","clickO","finish","props","click","isGameActive","className","onClick","winner","start","setWinner","num","setWinStyle","cells","lines","setCombination","lineX","indexOf","lineO","cellCombination","includes","win","statistic","row","col","App","Boolean","window","location","hostname","match","initialState","emptyField","emptyStyle","reducer","action","newField","newField2","copyStat","newComb","map","el","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c820210.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction Tictac(props) {\r\n\r\n    const { field, turn, gameActive, player1, player2, winClass } = props;\r\n    //\r\n    // const field2 = [\r\n    //     'cell', 'cell', 'cell',\r\n    //     'cell', 'cell', 'cell',\r\n    //     'cell', 'cell', 'cell'\r\n    // ];\r\n\r\n    const click = (i) => {\r\n\r\n        if (turn === 1) {\r\n            props.clickX(i)\r\n        } else{\r\n            props.clickO(i)\r\n\r\n        };\r\n    };\r\n\r\n\r\n\r\n\r\n    const isGameActive = !gameActive ? 'inactive' : '';\r\n\r\n    return(\r\n        <div className={isGameActive + ' mx-auto mt-3'}>\r\n\r\n            <div className='line'>\r\n                <div className={winClass[0]} onClick={() => click(0)}>{field[0]}</div>\r\n                <div className={winClass[1]} onClick={() => click(1)}>{field[1]}</div>\r\n                <div className={winClass[2]} onClick={() => click(2)}>{field[2]}</div>\r\n            </div>\r\n\r\n            <div className='line'>\r\n                <div className={winClass[3]} onClick={() => click(3)}>{field[3]}</div>\r\n                <div className={winClass[4]} onClick={() => click(4)}>{field[4]}</div>\r\n                <div className={winClass[5]} onClick={() => click(5)}>{field[5]}</div>\r\n            </div>\r\n\r\n            <div className='line'>\r\n                <div className={winClass[6]} onClick={() => click(6)}>{field[6]}</div>\r\n                <div className={winClass[7]} onClick={() => click(7)}>{field[7]}</div>\r\n                <div className={winClass[8]} onClick={() => click(8)}>{field[8]}</div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    state: state,\r\n    player1: state.player1,\r\n    player2: state.player2,\r\n    winClass: state.winCombinationClass,\r\n    gameActive: state.gameActive,\r\n    field: state.field,\r\n    turn: state.turn\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    clickX: (i) => dispatch({ type: 'CLICK_X', payload: i}),\r\n    clickO: (i) => dispatch({ type: 'CLICK_O', payload: i}),\r\n    finish: () => dispatch({ type: 'FINISH', payload: null}),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tictac);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction Header(props) {\r\n\r\n    const { turn, field, player1, player2, winner } = props;\r\n\r\n    const lines = [\r\n        (field[0] + field[1] + field[2]),\r\n        (field[3] + field[4] + field[5]),\r\n        (field[6] + field[7] + field[8]),\r\n        (field[0] + field[3] + field[6]),\r\n        (field[1] + field[4] + field[7]),\r\n        (field[2] + field[5] + field[8]),\r\n        (field[0] + field[4] + field[8]),\r\n        (field[6] + field[4] + field[2])\r\n    ];\r\n\r\n    const setCombination = () => {\r\n        const lineX = lines.indexOf('XXX')\r\n        const lineO = lines.indexOf('OOO')\r\n        const cellCombination = [ [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [6, 4, 2]];\r\n        lineX !== -1 ? props.setWinStyle(cellCombination[lineX]) : props.setWinStyle(cellCombination[lineO])\r\n    };\r\n\r\n        if (lines.includes('XXX'))  {\r\n            props.finish()\r\n            setCombination()\r\n            props.setWinner(1)\r\n        } else if ( lines.includes('OOO')) {\r\n            props.finish()\r\n            setCombination()\r\n            props.setWinner(2)\r\n        }\r\n\r\n    const win = () => {\r\n        switch ( winner) {\r\n            case 1:\r\n                return `${player1} won`;\r\n            case 2:\r\n                return `${player2} won`;\r\n            case 0:\r\n                switch (turn) {\r\n                    case 1:\r\n                        return `turn: ${player1}`;\r\n                    case 2:\r\n                        return `turn: ${player2}`\r\n                }\r\n        }\r\n    };\r\n\r\n    const startNewGame = () => {\r\n        props.start();\r\n    }\r\n\r\n    const isGameActive = props.gameActive ? 'hidden' : '';\r\n\r\n\r\n    return(\r\n        <div className='m-md-auto row mt-3'>\r\n            <div className='d-inline col-5'>{win()}</div>\r\n            <button className={isGameActive + ' col-4 pr-2'} onClick={startNewGame}>New Game</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    gameActive: state.gameActive,\r\n    field: state.field,\r\n    player2: state.player2,\r\n    player1: state.player1,\r\n    winner: state.winner,\r\n    turn: state.turn\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    finish: () => dispatch({ type: 'FINISH', payload: null}),\r\n    start: () => dispatch({ type: 'START', payload: null}),\r\n    setWinner: (num) => dispatch({ type: 'WINNER', payload: num}),\r\n    setWinStyle: (cells) => dispatch({ type: 'SET_STYLE', payload: cells})\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction Footer(props) {\r\n\r\n    const { statistic, player1, player2 } = props;\r\n\r\n    return(\r\n        <div row>\r\n            <div className='d-inline' col>SCORE:</div>\r\n            <div className='d-inline' col>\r\n                <div>\r\n                    {player1}: {statistic[1]}\r\n                </div>\r\n                <div>\r\n                    {player2}: {statistic[2]}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    statistic: state.statistic,\r\n    player2: state.player2,\r\n    player1: state.player1\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    start: () => dispatch({ type: 'START', payload: null}),\r\n    setWinner: (num) => dispatch({ type: 'WINNER', payload: num}),\r\n    setWinStyle: (cells) => dispatch({ type: 'SET_STYLE', payload: cells})\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Footer);","import React from 'react';\nimport './App.css';\nimport Tictac from \"./layout/Tictac\";\nimport Header from \"./layout/Header\";\nimport Footer from \"./layout/Footer\";\n\nfunction App() {\n    return (\n        <div className=\"container w-25\">\n            <Header/>\n            <Tictac/>\n            <Footer/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    player1: 'Jim',\r\n    player2: 'Bim',\r\n    winner: 0,\r\n    turn: 1,\r\n    gameActive: true,\r\n    statistic: [0, 0, 0],\r\n    winCombinationClass: [\r\n        'cell', 'cell', 'cell',\r\n        'cell', 'cell', 'cell',\r\n        'cell', 'cell', 'cell'\r\n    ],\r\n    field: [\r\n        null, null, null,\r\n        null, null, null,\r\n        null, null, null\r\n    ]\r\n};\r\n\r\nconst emptyField = [\r\n    null, null, null,\r\n    null, null, null,\r\n    null, null, null\r\n];\r\n\r\nconst emptyStyle = [\r\n    'cell', 'cell', 'cell',\r\n    'cell', 'cell', 'cell',\r\n    'cell', 'cell', 'cell'\r\n];\r\n\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case 'CLICK_X':\r\n\r\n            const newField = [...state.field]\r\n            newField[action.payload] = 'X';\r\n            return {\r\n                ...state,\r\n                field: newField,\r\n                turn: 2\r\n            };\r\n\r\n        case 'CLICK_O':\r\n\r\n            const newField2 = [...state.field]\r\n            newField2[action.payload] = 'O';\r\n            return {\r\n                ...state,\r\n                field: newField2,\r\n                turn: 1\r\n            };\r\n\r\n        case 'FINISH':\r\n            return {\r\n                ...state,\r\n                gameActive: false\r\n            };\r\n\r\n        case 'START':\r\n            const copyStat = [...state.statistic];\r\n                copyStat[state.winner]++;\r\n            return {\r\n                ...state,\r\n                field: emptyField,\r\n                winner: 0,\r\n                statistic: [...copyStat],\r\n                winCombinationClass: emptyStyle,\r\n                gameActive: true\r\n            };\r\n\r\n        case 'WINNER':\r\n\r\n            return {\r\n                ...state,\r\n                winner: action.payload,\r\n                turn: action.payload\r\n            };\r\n\r\n        case 'SET_STYLE':\r\n            const newComb = [...state.winCombinationClass]\r\n            action.payload.map(el => newComb[el] += ' comb')\r\n            return {\r\n                ...state,\r\n                winCombinationClass:  newComb\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { createStore } from 'redux';\r\nimport reducer from './reducer';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}